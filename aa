import cv2
import os
import dlib
import time
import numpy as np
from datetime import datetime

# Path to the shape predictor and face recognition model
predictor_path = "shape_predictor_68_face_landmarks.dat"
face_rec_model_path = "dlib_face_recognition_resnet_model_v1.dat"

# Initialize dlib's face detector and load the models
detector = dlib.get_frontal_face_detector()
shape_predictor = dlib.shape_predictor(predictor_path)
face_rec_model = dlib.face_recognition_model_v1(face_rec_model_path)

# Directory to store face data
faces_dir = "faces_data"
os.makedirs(faces_dir, exist_ok=True)

# Function to capture and save faces
def capture_face(name):
    cap = cv2.VideoCapture(0)  # 0 for the default camera
    count = 0
    
    # Create directory to store images of the person
    person_dir = os.path.join(faces_dir, name)
    os.makedirs(person_dir, exist_ok=True)
    
    print(f"Capturing face for {name}. Capturing for 10 seconds...")
    
    start_time = time.time()
    capture_duration = 10  # Capture for 10 seconds
    
    while int(time.time() - start_time) < capture_duration:
        ret, frame = cap.read()
        if not ret:
            print("Error capturing image")
            break
        
        # Convert frame to grayscale for faster face detection
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        
        # Detect faces
        faces = detector(gray)
        
        for face in faces:
            # Extract facial landmarks
            shape = shape_predictor(gray, face)
            
            # Compute the 128D face descriptor
            face_descriptor = face_rec_model.compute_face_descriptor(frame, shape)
            
            # Save face descriptor to a file
            np.save(os.path.join(person_dir, f"face_{count}.npy"), face_descriptor)
            
            # Save the frame with the face
            img_path = os.path.join(person_dir, f"{name}_{count}.jpg")
            cv2.imwrite(img_path, frame)
            print(f"Captured {img_path}")
            
            count += 1

    cap.release()
    print(f"Face capture for {name} completed.")
    
# Function to recognize faces
def recognize_faces():
    cap = cv2.VideoCapture(0)
    known_face_descriptors = []
    known_names = []

    # Load known faces
    for person_name in os.listdir(faces_dir):
        person_dir = os.path.join(faces_dir, person_name)
        for file in os.listdir(person_dir):
            if file.endswith(".npy"):
                face_descriptor = np.load(os.path.join(person_dir, file))
                known_face_descriptors.append(face_descriptor)
                known_names.append(person_name)

    print("Recognizing faces. Capturing for 10 seconds...")
    
    start_time = time.time()
    capture_duration = 10  # Capture for 10 seconds
    
    while int(time.time() - start_time) < capture_duration:
        ret, frame = cap.read()
        if not ret:
            print("Error capturing image")
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = detector(gray)

        for face in faces:
            shape = shape_predictor(gray, face)
            face_descriptor = face_rec_model.compute_face_descriptor(frame, shape)

            # Compare face with known faces
            distances = np.linalg.norm(known_face_descriptors - face_descriptor, axis=1)
            min_distance_idx = np.argmin(distances)
            
            if distances[min_distance_idx] < 0.6:  # Threshold for recognizing
                name = known_names[min_distance_idx]
                print(f"Recognized: {name}")
                
                # Log the recognized name and time
                with open("attendance_log.txt", "a") as f:
                    log = f"{name}, {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f.write(log)
                    print(f"Logged: {log}")

    cap.release()
    print("Face recognition completed.")

# Main function to choose between registration and recognition
def main():
    print("1. Register new face")
    print("2. Recognize faces")
    choice = input("Choose option (1/2): ")

    if choice == '1':
        name = input("Enter the name of the person: ")
        capture_face(name)
    elif choice == '2':
        recognize_faces()
    else:
        print("Invalid choice. Please choose 1 or 2.")

if __name__ == "__main__":
    main()
