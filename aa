import dlib
import numpy as np
import cv2
import os
import pandas as pd
import time
import sqlite3
import datetime

# Dlib face detector and shape predictor
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor('data/data_dlib/shape_predictor_68_face_landmarks.dat')
face_reco_model = dlib.face_recognition_model_v1("data/data_dlib/dlib_face_recognition_resnet_model_v1.dat")

# Create a connection to the SQLite database
conn = sqlite3.connect("attendance.db")
cursor = conn.cursor()

# Create table for attendance
table_name = "attendance"
create_table_sql = f"CREATE TABLE IF NOT EXISTS {table_name} (name TEXT, time TEXT, date DATE, UNIQUE(name, date))"
cursor.execute(create_table_sql)
conn.commit()
conn.close()

class FaceRecognizer:
    def __init__(self):
        self.face_features_known_list = []
        self.face_name_known_list = []
        self.current_frame_face_centroid_list = []
        self.current_frame_face_name_list = []
        self.current_frame_face_cnt = 0
        self.font = cv2.FONT_ITALIC

    def get_face_database(self):
        if os.path.exists("data/features_all.csv"):
            csv_rd = pd.read_csv("data/features_all.csv", header=None)
            for i in range(csv_rd.shape[0]):
                features = [csv_rd.iloc[i][j] for j in range(1, 129)]
                self.face_name_known_list.append(csv_rd.iloc[i][0])
                self.face_features_known_list.append(features)
            return True
        else:
            print("'features_all.csv' not found!")
            return False

    def return_euclidean_distance(self, feature_1, feature_2):
        return np.linalg.norm(np.array(feature_1) - np.array(feature_2))

    def attendance(self, name):
        current_date = datetime.datetime.now().strftime('%Y-%m-%d')
        conn = sqlite3.connect("attendance.db")
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM attendance WHERE name = ? AND date = ?", (name, current_date))
        existing_entry = cursor.fetchone()

        if not existing_entry:
            current_time = datetime.datetime.now().strftime('%H:%M:%S')
            cursor.execute("INSERT INTO attendance (name, time, date) VALUES (?, ?, ?)", (name, current_time, current_date))
            conn.commit()
            print(f"{name} marked as present at {current_time}")
        conn.close()

    def process(self, stream):
        if self.get_face_database():
            while stream.isOpened():
                _, img_rd = stream.read()
                faces = detector(img_rd, 0)
                self.current_frame_face_cnt = len(faces)
                self.current_frame_face_centroid_list = []

                if self.current_frame_face_cnt > 0:
                    for face in faces:
                        shape = predictor(img_rd, face)
                        face_feature = face_reco_model.compute_face_descriptor(img_rd, shape)
                        distances = [self.return_euclidean_distance(face_feature, feature) for feature in self.face_features_known_list]

                        if min(distances) < 0.6:
                            name = self.face_name_known_list[distances.index(min(distances))]
                        else:
                            name = "unknown"

                        self.current_frame_face_centroid_list.append([int((face.left() + face.right()) / 2), int((face.top() + face.bottom()) / 2)])
                        self.current_frame_face_name_list.append(name)

                        # Mark attendance
                        if name != "unknown":
                            self.attendance(name)

                        # Draw rectangles around the face
                        cv2.rectangle(img_rd, (face.left(), face.top()), (face.right(), face.bottom()), (255, 255, 255), 2)
                        cv2.putText(img_rd, name, (face.left(), face.top() - 10), self.font, 0.8, (0, 255, 255), 1)

                cv2.imshow("Face Recognizer", img_rd)

                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break

            stream.release()
            cv2.destroyAllWindows()

# Start the face recognition process
cap = cv2.VideoCapture(0)
recognizer = FaceRecognizer()
recognizer.process(cap)
